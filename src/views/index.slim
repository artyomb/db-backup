sass:
 li
   list-style: none
 ul
   list-style: none

ruby:
  require_relative '../utils/common_utils'
  structure ||= begin
                  puts "Extracting backups structure..."
                  extract_backups_dir_structure(BACKUPS_DIR)
                rescue Exception => e
                  error_message = "Error when extracting backups structure:\n#{e}"
                  puts error_message
                  nil
                end
  structure_uploaded ||= begin
                  puts "Extracting backups structure..."
                  extract_backups_dir_structure(UPLOADED_BACKUPS_DIR)
                rescue Exception => e
                  error_message = "Error when extracting backups structure:\n#{e}"
                  puts error_message
                  nil
                end
  default_db_url = ENV['DB_URL'] # postgres://settlements:settlements@settlements_settlements_db/settlements?sslmode=disable
  default_user_password = default_db_url.split('@').first.split('//').last
  default_db_user = default_user_password.split(':').first
  default_db_host_port = default_db_url.split('@').last.split('/').first


  db_user = ENV['RESTORE_TARGET_USER']
  db_user ||= default_db_user
  db_host_port = ENV['RESTORE_TARGET_HOST_PORT']
  db_host_port ||= default_db_host_port

  default_db_name = default_db_url.split('?').first.split('/').last

javascript:
    let restoring_host_port = `#{{db_host_port.to_s}}`;
    let restoring_user = `#{{db_user}}`;
    let char_limit = 100;

    function createConfirmationDialog(confirmationCallbackString, confirmationHTML) {
        const dialog = document.createElement("div");
        dialog.className = "dialog-overlay";
        dialog.style.position = "fixed";
        dialog.style.top = "0";
        dialog.style.left = "0";
        dialog.style.width = "100%";
        dialog.style.height = "100%";
        dialog.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
        dialog.style.display = "flex";
        dialog.style.justifyContent = "center";
        dialog.style.alignItems = "center";
        dialog.style.zIndex = "1000";
        dialog.innerHTML = `
                        <div class="confirmation-dialog" style="background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                            ${confirmationHTML}
                            <div class="dialog-buttons">
                                <button onclick="${confirmationCallbackString}">Yes</button>
                                <button onclick="closeConfirmationDialog()">No</button>
                            </div>
                        </div>
                    `;
        document.body.appendChild(dialog);
    }

    function showLoadingInDialog(message) {
        document.querySelector(".dialog-overlay").innerHTML = `
                    <div class="restore-dialog" style="background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <div style="text-align: center;">
                            <div class="loading-spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; margin: 20px auto;"></div>
                            <p>${message}</p>
                        </div>
                    </div>
                    <style>
                        @keyframes spin {
                            0% { transform: rotate(0deg); }
                            100% { transform: rotate(360deg); }
                        }
                    </style>
                `;
    }

    function closeConfirmationDialog() {
        document.querySelector(".dialog-overlay")?.remove();
        console.log("Confirmation dialog closed");
    }

    function showNotification(isSuccess, notificationMessage) {
        const notification = document.createElement("div");
        document.querySelector(".dialog-overlay")?.remove();
        notification.className = `notification ${isSuccess ? 'success' : 'error'}`;
        Object.assign(notification.style, {
            position: "fixed",
            top: "20px",
            right: "20px",
            padding: "15px",
            borderRadius: "4px",
            zIndex: "1000",
            backgroundColor: isSuccess ? "#4CAF50" : "#f44336",
            color: "white",
            boxShadow: "0 2px 5px rgba(0,0,0,0.2)",
            display: "flex",
            alignItems: "center",
            gap: "10px"
        });
        const messageSpan = document.createElement("span");
        messageSpan.textContent = notificationMessage;
        const closeButton = document.createElement("button");
        closeButton.innerHTML = "×";
        Object.assign(closeButton.style, {
            background: "none",
            border: "none",
            color: "white",
            fontSize: "20px",
            cursor: "pointer",
            padding: "0 5px"
        });
        closeButton.onclick = () => notification.remove();
        notification.appendChild(messageSpan);
        notification.appendChild(closeButton);
        document.body.appendChild(notification);
    }


    function callRestoreDialog(url) {
        console.log("Restore dialog called with URL:", url);
        const backupName = url.split('/').pop();
        const confirmationCallbackString = `submitRestore('${url}')`;
        const confimationHTML = `
        <h2>Restore Confirmation</h2>
        <p>Are you sure you want to start restoring with following parameters?</p>
        <div class="form-group" style="margin-bottom: 15px;">
            <label for="backupName">SQL File:</label>
            <input type="text" id="backupName" name="backupName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" value="${backupName}" disabled>
            <label for="hostPort">Host and Port:</label>
            <input type="text" id="hostPort" name="hostPort" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" value="${restoring_host_port}" disabled>
            <label for="user">User:</label>
            <input type="text" id="user" name="user" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" value="${restoring_user}" disabled>
            <laber for="password">Password:</label>
            <input type="password" id="password" name="password" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" value="***" disabled>
            <label for="dbName">Database Name:</label>
            <input type="text" id="dbName" name="dbName" style="width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px;" value="${backupName.split('.')[0]}">
        </div>
        `;
        createConfirmationDialog(confirmationCallbackString, confimationHTML);
    }

    async function callForceBackupDialog() {
        const confirmationCallbackString = "submitForceBackup()";
        const confimationHTML = `
                <h2>Force Backup Confirmation</h2>
                <p>Are you sure you want to invoke backup pipeline?</p>
                `;
        createConfirmationDialog(confirmationCallbackString, confimationHTML);
    }

    async function callDeleteBackupDialog(backupPath) {
        const confirmationCallbackString = `submitDeleteBackup('${backupPath}')`;
        const confimationHTML = `
                <h2>Delete backup confirmation</h2>
                <p>Are you sure you want to delete backup?</p>
                `;
        createConfirmationDialog(confirmationCallbackString, confimationHTML);
    }

    async function submitRestore(url) {
        console.log("Restore submitted with URL:", url);
        const dbName = document.getElementById("dbName").value;
        if (!dbName) {
            alert("Please enter a database name.");
            throw new Error("Please enter a database name.");
        }
        showLoadingInDialog("Restoring database by chosen backup...");
        let isSuccess;
        let notificationMessage;
        try {
            const response = await fetch(url, {
                method: 'POST',
                body: JSON.stringify({database_name: dbName}),
            });
            isSuccess = response.ok;
            notificationMessage = await response.text();
        } catch (error) {
            isSuccess = false;
            notificationMessage = error.message;
        }
        showNotification(isSuccess, notificationMessage);
    }

    async function submitForceBackup() {
        console.log("Force backups submitted");
        showLoadingInDialog("Invoking backup pipeline...");
        let isSuccess;
        let notificationMessage;
        try {
            const response = await fetch('invoke-force-backup', {
                method: 'POST',
                credentials: 'same-origin'
            });
            isSuccess = response.ok;
            notificationMessage = await response.text();
        } catch (error) {
            isSuccess = false;
            notificationMessage = error.message;
        }
        showNotification(isSuccess, notificationMessage);
    }

    async function submitDeleteBackup(elementPath) {
        console.log("Delete backups submitted");
        showLoadingInDialog("Deleting backup...");
        let isSuccess;
        let notificationMessage;
        try {
            const iconElement = document.getElementById(elementPath);
            const response = await fetch(`dumps${elementPath}`, {
                method: 'DELETE',
            });
            isSuccess = response.ok;
            notificationMessage = await response.text();
            if (isSuccess) iconElement.remove();
        } catch (error) {
            isSuccess = false;
            notificationMessage = error.message;
        }
        showNotification(isSuccess, notificationMessage);
    }




    document.addEventListener("DOMContentLoaded", function() {
        const fileViewArea = document.getElementById("file-area");

        document.querySelectorAll(".file-element").forEach(async function(fileElement) {
            fileElement.addEventListener("click", async function (event) {
                if (event.target.classList.contains('restore-icon')) {
                    const iconElement = event.target;
                    const url = iconElement.dataset.href;
                    callRestoreDialog(url);
                    event.stopPropagation();
                    return;
                }

                console.log("Clicked on file element with data-href:", fileElement.dataset.href);
                const url = fileElement.dataset.href;
                try {
                    const response = await fetch(url);
                    const htmlContent = await response.text();
                    fileViewArea.style.opacity = 1;
                    fileViewArea.innerHTML = htmlContent;
                    fileViewArea.style.textAlign = "left";
                    document.querySelector(".chosen")?.classList.toggle("chosen");
                    fileElement.classList.toggle("chosen");
                    hljs.highlightElement(fileViewArea.querySelector("code"));
                } catch (error) {
                    console.error("Error loading file content:", error);
                    fileViewArea.innerHTML = "Error loading file content";
                }
            });
        });

        document.querySelectorAll(".expandable-element").forEach(function(element) {
            if (element.dataset.content.length > char_limit) {
                element.style.cursor = "pointer";
                element.innerHTML = element.dataset.content.slice(0, char_limit) + "...";
                element.classList.add("shortened");
                element.addEventListener("click", function (event) {
                    // if ctrl is pressed set content
                    if (event.ctrlKey) {
                        if (element.classList.contains("shortened")) {
                            element.innerHTML = element.dataset.content;
                            element.classList.remove("shortened");
                        } else {
                            element.innerHTML = element.dataset.content.slice(0, char_limit) + "...";
                            element.classList.add("shortened");
                        }
                    }
                });
            } else {
                element.innerHTML = element.dataset.content;
            }
        });

        document.querySelectorAll(".time").forEach(function(element) {
            const timeString = element.innerHTML; // example "2025-04-23 09:59:41 +0300"
            const date = new Date(timeString);
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' };
            element.innerHTML = date.toLocaleString('en-US', options);
        });
    });

    async function uploadDump() {
        const fileInput = document.getElementById('fileInput');

        if (!fileInput.files.length) {
            showNotification(false, 'Please select a file.');
            return;
        }

        const file = fileInput.files[0];
        const filename = file.name;

        if (!filename.toLowerCase().endsWith('.sql') && !filename.toLowerCase().endsWith('.zip') && !filename.toLowerCase().endsWith('.rar') && !filename.toLowerCase().endsWith('.gz')) {
            showNotification(false, 'You are trying to upload file with unsupported extension');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        const btn = document.getElementById("uploadDumpButton");

        try {
            btn.disabled = true;
            const response = await fetch('dumps', {
                method: 'POST',
                body: formData
            });
            const result = await response.json();
            showNotification(response.status == 200, JSON.stringify(result));

            if (response.status == 200) {
                document.getElementById('fileInput').value = '';
            }
        } catch (error) {
            showNotification(false, `An error occurred while sending the file: ${error.message}`);
        }
        btn.disabled = false;
    }
sass:
  .hdr-container
    padding-bottom: 1rem
    padding-right: 1rem
    position: sticky
    top: 0
  .directory-structure-container
    flex: 1
    flex-basis: 50%
    .file-structure
      height: 90%
      overflow-y: auto
      overflow-x: auto
      padding-right: 0.5rem
    ul
      margin: 0
      margin-left: 1rem
    .dir-element
      &:hover
        background-color: #f0f0f0
    .file-element
      padding-top: 0.2rem
      &:hover
        cursor: pointer
        background-color: #f0f0f0
        color: black
  #file-area
    flex: 1
    flex-basis: 50%
    background-color: #e4e4e4
    overflow-y: auto

    code
      background-color: #e4e4e4
      margin-bottom: 0
      height: -webkit-fill-available
      white-space: pre

  .chosen
    background-color: rgba(77, 125, 208, 0.3)
    color: black

  .content-container
    height: fit-content
    display: flex
    flex-direction: row
    column-gap: 1rem
    padding: 1rem
    border: 0.1rem solid #ccc
    border-radius: 0.5rem

  .margin-remove-top
    margin-top: 0 !important

  .float-right
    float: right !important
  .base-padding
    padding: 0.5rem
  .width-half
    width: 50% !important

  .upload-dump-button
    width: 80%
    max-width: 25rem

  .download-icon
    display: inline-block
    margin-right: 0.5rem
    padding: 0.15rem 0.3rem
    border-radius: 0.3rem
    background-color: #4CAF50
    color: white
    text-decoration: none
    transition: all 0.3s ease
    cursor: pointer

    box-shadow: 0 2px 4px rgba(0,0,0,0.1)

    &:hover
      background-color: #45a049
      transform: translateY(-1px)
      box-shadow: 0 4px 8px rgba(0,0,0,0.15)

    &:active
      transform: translateY(1px)
      box-shadow: 0 1px 2px rgba(0,0,0,0.1)

  .disable-hover-change
    &:hover
      background-color: unset
  .restore-icon
      display: inline-block
      margin-right: 0.5rem
      padding: 0.15rem 0.3rem
      border-radius: 0.3rem
      background-color: #3699f9
      color: white
      text-decoration: none
      transition: all 0.3s ease
      cursor: pointer
      box-shadow: 0 2px 4px rgba(0,0,0,0.1)

      &:hover
        background-color: #4b7aaf
        transform: translateY(-1px)
        box-shadow: 0 4px 8px rgba(0,0,0,0.15)

      &:active
        transform: translateY(1px)
        box-shadow: 0 1px 2px rgba(0,0,0,0.1)
  .upload-data-row
    background-color: aliceblue
    &:hover
      background-color: #cde7ff
  .padding-vertical-small
    padding-top: 0.75rem
    padding-bottom: 0.75rem
  .stats-table
    text-align-last: center
    font-weight: bold
    border: 0.125rem solid black
    thead
      background-color: #fffacf
div
  .flex.justify-content-space-between
    h1.vertical-margin-big DB Backups
    .margin-big.flex.align-items-center
      .font-weight-bold.margin-right Force backup
      .action-box-big.primary-action-background.text-align-center.align-content-center.margin-right-big.cursor-pointer.font-size-bigger onclick="callForceBackupDialog()"="▷"
  h2.margin-bottom-big= ENV['TABLES'].nil? ? "All tables from database are stored" : "Following tables will be stored in backup: #{ENV['TABLES']}"
h2 Latest DB backup status report (if message is too big, press ctrl+click to expand)
- background_color = $last_backup_report[:status_code] == 0 ? '#d4edda' : '#f8d7da'
.width-fit-content.white-space-pre.vertical-margin.overflow-x-auto.limit-max-width style="background-color: #{background_color}; padding: 0.5rem; border-radius: 0.5rem"
  .vertical-margin-small
    span.font-weight-bold= 'Backup ended ' + (($last_backup_report[:status_code] == 0) ?'successfully' : 'with error')
    span= " at "
    span.time.font-weight-bold= $last_backup_report[:time]
  .vertical-margin-small
    span.font-weight-bold= "Backup command message:"
    span.expandable-element data-content="#{$last_backup_report[:message]}"
  - if !$last_backup_report[:error_message].nil? && !$last_backup_report[:error_message].empty?
    .vertical-margin-small
      span.font-weight-bold= "Backup error message:\n"
      span.expandable-element data-content="#{$last_backup_report[:error_message]}"
.vertical-margin-big
  - if !ENV['RSYNC_TARGETS'].nil?
    h2 All backups will be sent with rsync, defined in as following RSYNC_TARGETS:
    - ENV['RSYNC_TARGETS'].split(',').each do |target|
      p.font-weight-bold.margin-left-small=target
    h2 Rsync reports (if message is too big, press ctrl+click to expand):
    - if $last_rsync_reports.nil? || $last_rsync_reports.empty?
      .vertical-margin-small.margin-left-small No rsync reports available.
    - else
      - $last_rsync_reports.each do |rsync_report|
        - background_color = rsync_report[:status_code] == 0 ? '#d4edda' : '#f8d7da'
        .width-fit-content.white-space-pre.vertical-margin.overflow-x-auto.limit-max-width style="background-color: #{background_color}; padding: 0.5rem; border-radius: 0.5rem"
          .vertical-margin-small
            span.font-weight-bold= 'Rsync ended ' + ((rsync_report[:status_code] == 0) ? 'successfully' : 'with error')
            span= " at "
            span.time.font-weight-bold= rsync_report[:time]
          .vertical-margin-small
            span.font-weight-bold= "Backup command message:\n"
            span.expandable-element data-content="#{rsync_report[:message]}"
            - if !rsync_report[:error_message].nil? && !rsync_report[:error_message].empty?
              .vertical-margin-small
                span.font-weight-bold= "Backup error message:\n"
                span.expandable-element data-content="#{rsync_report[:error_message]}"

  - else
    h2 No RSYNC_TARGETS defined in environment. So no backups will be sent with rsync.
- render_structure = ->(structure, parent_path = '', parent_id = 'root', counter = 0) do
  - selected = structure&.select{|n, c| !(c.is_a?(Hash) && c[:is_dir]) && n != :size && c.is_a?(Hash) }
  - unless selected == nil
    - selected.sort_by { |name, _content| name }.reverse.each do |name, content|
      tr.file-element data-href="file-in-archive/#{content[:path]}" id="#{content[:path]}"
        td
          span
          = " #{name}"
        td
          - begin
            - backup_time = determine_backup_time(name)
          - rescue => e
            - puts(e.message)
            - backup_time = "UNKNOWN"
          span.time.float-right #{backup_time}
        td
          span.float-right #{represent_size(content[:size])}
        td
          span.remove-icon.text-align-center.align-content-center.action-box onclick="callDeleteBackupDialog('#{content[:path]}')"= "🗑️"
          span.restore-icon.text-align-center.align-content-center.action-box data-href="restore-by-dump/#{content[:path]}"= "↺"
          a.download-icon.text-align-center.align-content-center.action-box href="dumps/#{content[:path]}" download=""= "↓"
      - counter += 1
h3.margin-remove-top= "Total size: #{represent_size(structure[:size] + structure_uploaded[:size])}"
.content-container
  .directory-structure-container
    h3= "Database \"#{default_db_name}\" dumps"
    table.vertical-margin style="font-size: 1rem"
      thead
        tr
          td.table-header= "Files"
          td.table-header.text-align-right= "Backup datetime"
          td.table-header.text-align-right= "Size"
          td.table-header style="width: 1%"= "Actions"
      tbody
      - render_structure.call(structure)
    br
    h3 Externally loaded dumps
    table.vertical-margin style="font-size: 1rem"
      thead
        tr
          td.table-header= "Files"
          td.table-header.text-align-right= "Backup datetime"
          td.table-header.text-align-right= "Size"
          td.table-header style="width: 1%"= "Actions"
      tbody
      - render_structure.call(structure_uploaded)
      tr.disable-hover-change.upload-data-row
        td.text-align-center.padding-vertical-small colspan="4"
          input type="file" id="fileInput"
          button.upload-dump-button id="uploadDumpButton" onclick="uploadDump()"= "Upload Dump"
          / form#uploadForm enctype="multipart/form-data"
          /   label for="comments" Comments:
          /   textarea#comments name="comments" rows="4"
  #file-area.base-padding.content-display.width-half Choose file to view content