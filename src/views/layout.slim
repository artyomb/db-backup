javascript:

    function listenSortBy(table) {
        const uploadDataRow = table.querySelector('.upload-data-row');

        // TODO: filter out column header element with known categoryString and add eventlistener for sorting for current table
        table.querySelectorAll('.supported-for-sorting').forEach(elem => {
            const categoryId = elem.dataset.sortingCategory;
            elem.addEventListener('click', () => {
                const tbody = table.querySelector('tbody');

                const activeElement = table.querySelector('.sorting-active');
                if (activeElement) {
                    if (activeElement === elem) {
                        elem.classList.toggle('descending');
                    } else {
                        activeElement.classList.remove('sorting-active');
                        activeElement.classList.remove('descending');
                        elem.classList.add('sorting-active');
                    }
                } else {
                    elem.classList.add('sorting-active');
                }

                // Grab rows except the special one
                const rows = Array.from(tbody.querySelectorAll('tr')).filter(
                    row => row !== uploadDataRow
                );

                rows.sort((a, b) => {
                    const valA = a.dataset[categoryId] || '';
                    const valB = b.dataset[categoryId] || '';

                    // Try date sort (normalize timezone +HHMM to +HH:MM)
                    const dateA = Date.parse(valA.replace(/([+-]\d{2})(\d{2})$/, '$1:$2'));
                    const dateB = Date.parse(valB.replace(/([+-]\d{2})(\d{2})$/, '$1:$2'));
                    if (!isNaN(dateA) && !isNaN(dateB)) {
                        return elem.classList.contains('descending') ? -(dateA - dateB) : dateA - dateB;
                    }

                    // Try number sort
                    const numA = parseFloat(valA);
                    const numB = parseFloat(valB);
                    if (!isNaN(numA) && !isNaN(numB)) {
                        return elem.classList.contains('descending') ? -(numA - numB) : numA - numB;
                    }

                    // Fallback to string sort
                    return elem.classList.contains('descending') ? -(valA.localeCompare(valB)) : valA.localeCompare(valB);
                });

                // Empty tbody and rebuild in sorted order
                tbody.innerHTML = '';
                rows.forEach(row => tbody.appendChild(row));

                // Always append the special row at the end
                if (uploadDataRow) {
                    tbody.appendChild(uploadDataRow);
                }
            });
        });
    }

    function renderTime() {
        document.querySelectorAll(".time").forEach(function (element) {
            const timeString = element.dataset.dateTime; // example "2025-04-23 09:59:41 +0300"
            const date = new Date(timeString);
            const options = {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric'
            };
            element.innerHTML = date.toLocaleString('en-US', options);
        });
    }

    function determineBackupTime(filename) {
        const regex = /_(\d{8})_(\d{6})\./;
        const match = filename.match(regex);

        if (!match) {
            return null; // Format does not match
        }

        const [, datePart, timePart] = match;

        const year = datePart.slice(0, 4);
        const month = datePart.slice(4, 6);
        const day = datePart.slice(6, 8);
        const hour = timePart.slice(0, 2);
        const minute = timePart.slice(2, 4);
        const second = timePart.slice(4, 6);

        // Return formatted string: YYYY-MM-DD HH:MM:SS +0000
        return `${year}-${month}-${day} ${hour}:${minute}:${second} +0000`;
    }


    function representSize(bytes) {
        try {
            const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
            if (bytes === 0) return '0 B';

            let exp = Math.floor(Math.log(bytes) / Math.log(1024));
            exp = Math.min(exp, units.length - 1);

            const size = bytes / Math.pow(1024, exp);
            return `${size.toFixed(2)} ${units[exp]}`;
        } catch (e) {
            console.error("Error in size representing:", e);
            return '-';
        }
    }




doctype html
html
  head
    link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/intellij-light.min.css"
    script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"
    script= "hljs.highlightAll();"
    meta[charset="utf-8"]
    title DB Backups
    meta[name="viewport" content="width=device-width, initial-scale=1.0"]
    sass:
      body1
        background-color: black
        color: white
      .action
        margin-right: 1em
      .sha256, .stack_name, .container_name
        opacity: 0.5
        margin-left: 0.3em
      table
        width: 100%
        border-collapse: collapse
        tr:hover
          background: antiquewhite
        td, th
          padding-right: 1em
          text-align: left
          white-space: nowrap
          max-width: 18vw
          overflow: hidden
          text-overflow: ellipsis
          //word-wrap: break-word
          //word-break: break-all
      body
        font-family: monospace
        nav
          margin: -0.5em
          background: #ededed
          a
            font-size: 1.5em
            text-decoration: none
            &:hover
              text-decoration: underline
          .time
          .version
            margin-right: 4em
      .align-items-center
        align-items: center
      .align-content-center
        align-content: center
      .text-align-center
        text-align: center
      .text-align-right
        text-align: right
      .font-weight-bold
        font-weight: bold
      .white-space-pre
        white-space: pre
      .width-fit-content
        width: fit-content
      .limit-max-width
        max-width: 99%
      .overflow-x-auto
        overflow-x: auto
      .action-box
        width: 1.5rem
        height: 1.5rem
      .action-box-big
        width: 3rem
        height: 3rem
      .primary-action-background
        color: white
        background-color: #3699f9
        transition: all 0.3s ease
        &:hover
          background-color: #4b7aaf
      .font-size-bigger
        font-size: 1.2rem
      .cursor-pointer
        cursor: pointer
      .flex
        display: flex
      .justify-content-space-between
        justify-content: space-between

      .margin-small
        margin: 0.5rem
      .margin
        margin: 1rem
      .margin-big
        margin: 2rem


      .vertical-margin
        margin-top: 1rem
        margin-bottom: 1rem
      .vertical-margin-small
        margin-top: 0.5rem
        margin-bottom: 0.5rem
      .vertical-margin-big
        margin-top: 2rem
        margin-bottom: 2rem

      .horizontal-margin
        margin-right: 1rem
        margin-left: 1rem
      .horizontal-margin-small
        margin-right: 0.5rem
        margin-left: 0.5rem
      .horizontal-margin-big
        margin-right: 2rem
        margin-left: 2rem

      .margin-left-small
        margin-left: 0.5rem
      .margin-left
        margin-left: 1rem
      .margin-left-big
        margin-left: 2rem

      .margin-right-small
        margin-right: 0.5rem
      .margin-right
        margin-right: 1rem
      .margin-right-big
        margin-right: 2rem
      .margin-bottom-small
        margin-bottom: 0.5rem
      .margin-bottom
        margin-bottom: 1rem
      .margin-bottom-big
        margin-bottom: 2rem

  body
    nav style="display: flex; justify-content: space-between; padding: 1em;"
      a.home-link href="#" #Home
      .right
        span.version = "v" + (ENV['ORG_OPENCONTAINERS_IMAGE_VERSION'] || '<local run>')
        span = Time.now

    javascript:
      if (!location.href.includes('?') && !location.href.endsWith('/')) { location.href = location.href + '/'; }

      const BASE_PATH = window.location.pathname.match(/(.*insight)/)?.[1] || '';
      const home = document.querySelector('a.home-link');
      home.href = BASE_PATH + '/';

    == yield
